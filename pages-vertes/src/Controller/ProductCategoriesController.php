<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\ORM\TableRegistry;

/**
 * ProductCategories Controller
 *
 * @property \App\Model\Table\ProductCategoriesTable $ProductCategories
 *
 * @method \App\Model\Entity\ProductCategory[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ProductCategoriesController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['listProducts']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $productCategory = $this->ProductCategories->newEntity();
        if ($this->request->is('post')) {
            $data = $this->request->getData();
            $data['name'] = h($data['name']);
            $productCategory = $this->ProductCategories->patchEntity($productCategory, $data);
            $productCategory->enterprise_id = $this->Auth->user()['enterprise']['id'];
            if ($this->ProductCategories->save($productCategory)) {
                $this->Flash->success(__d("Products",'The product category has been saved.'));

            } else {
                $this->Flash->error(__d("Products",'The product category could not be saved. Please, try again.'));
            }
        }
        $this->redirect('/my-enterprise/products#categories');
    }

    /**
     * Edit method
     *
     * @param string|null $id Product Category id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        if(!$this->validateCatOwnership($id, $this->Auth->user('enterprise')['id'])){
            $this->Flash->error(__d('Products','You are not authorized to delete this product'));
            return $this->redirect(['controller'=>'Products', 'action'=>'privateIndex']);
        }
        $productCategory = $this->ProductCategories->get($id);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $data = $this->request->getData();

            $productCategory = $this->ProductCategories->patchEntity($productCategory, $data);
            $productCategory->name = h($productCategory->name);
            if ($this->ProductCategories->save($productCategory)) {
                $this->Flash->success(__d("Products",'The product category has been saved.'));

                return $this->redirect('/my-enterprise/products#categories');
            }
            $this->Flash->error(__d("Products",'The product category could not be saved. Please, try again.'));
            return $this->redirect('/my-enterprise/products#categories');
        }
        $this->redirect('/my-enterprise/products#categories');
    }

    /**
     * Delete method
     *
     * @param string|null $id Product Category id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        if(!$this->validateCatOwnership($id, $this->Auth->user('enterprise')['id'])){
            $this->Flash->error(__d('Products','You are not authorized to delete this product'));
            return $this->redirect(['controller'=>'Products', 'action'=>'privateIndex']);
        }
        $this->request->allowMethod(['post', 'delete']);
        $productCategory = $this->ProductCategories->get($id);

        if ($this->ProductCategories->delete($productCategory)) {
            $this->Flash->success(__d("Products",'The product category and all its products have been deleted.'));
        } else {
            $this->Flash->error(__d("Products",'The product category could not be deleted. Please, try again.'));
        }

        $this->redirect('/my-enterprise/products#categories');
    }

    /**
     * Retourne en JSON tous les produits d'une catÃ©gorie
     * @param null $id
     * @return \Cake\Http\Response|null|static
     */
    public function listProducts($id = null){

//        if(!$this->validateCatOwnership($id, $this->Auth->user('enterprise')['id'])){
//            return;
//        }

        $cat = $this->ProductCategories->find()->contain('Products')->where(['id'=>$id])->toArray();

        if(count($cat) >0){

            $func = function($p){

                return ['id'=>$p->id, 'name'=>$p->name];
            };

            $data = array_map($func, $cat[0]->products);

            $warning = __d("Products", "This category contains {0} product(s).", count($cat[0]->products));

            $response = [
                'warning'=>$warning,
                'data'=>$data
            ];

            $this->response=$this->response->withStringBody(json_encode($response));
        }
        else{
            $this->response=$this->response->withStringBody(json_encode([]));
        }

        $this->response->type('json');
        return $this->response;
    }

    private function validateCatOwnership($catId, $ent_id){
        $CAT = TableRegistry::get('ProductCategories');
        if($CAT->exists(['id' => $catId]) && $CAT->get($catId)['enterprise_id'] != $ent_id){
            $this->Flash->error(__d("Products","This category does not exist in your enterprise"));
            return false;
        }
        return true;
    }
}
